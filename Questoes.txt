Individualmente (ou em dupla), implemente (com qualquer linguagem de programação a sua escolha e sem necessidade de interface gráfica) e apresente (gravando video explicando código e execução):

1. A alocação de memória usando partições fixas ou variáveis/segmentação (implementar apenas UMA à sua escolha). Deve ser possível configurar/alterar (ou dar opção ao usuário):

- Estabelecer o tamanho máximo de memória física (em qualquer unidade, MB, KB, etc.)

- Se partições fixas, definir previamente o tamanho das partições (na mesma unidade que a memória física)

- Definir um conjunto de processos de duração "infinita" (thread ou simulado) com nome, ID, tamanho (na mesma unidade que a memória física), etc.

- A partir da ordem de criação dos processos (FIFO) e UM algoritmo de alocação na memória (first-fit, best-fit, worst-fit, etc.), mostrar a       alocação da memória (seu estado/capacidade, se há fragmentação interna e/ou externa, além das posições livres/alocadas, etc.)

- A cada nova alocação, caso a memória esteja cheia, realizar compactação (apenas se as partições forem dinâmicas/segmentação) e, persistindo a falta de memória, retirar aleatoriamente um processo, que irá para a memória secundária (swapping).


2. A alocação de memória usando paginação. Deve ser possível configurar/alterar (ou dar opção ao usuário):

- Estabelecer o tamanho máximo de memória física (em qualquer unidade, MB, KB, etc.)

- Estabelecer o tamanho máximo de memória virtual (maior que a memória física e na mesma unidade)

- Definir previamente o tamanho das páginas (na mesma unidade que a memória física/virtual) e calcular/alocar a quantidade de páginas necessárias a um processo a depender de seu tamanho

- Definir um conjunto de processos de duração "infinita" (thread ou simulado) com nome, ID, tamanho (na mesma unidade que a memória física), etc.

- A partir da ordem de criação dos processos (FIFO) e da ordem de referências às páginas (FIFO ou aleatoriamente) e UM algoritmo de substituição de páginas (FIFO, LRU, Relógio, SC, etc. e em caso de algoritmos que verifiquem bits, de tempos em tempos, devem ser alterados/resetados), mostrar a alocação da memória (seu estado/capacidade, se há fragmentação interna, além das páginas livres/alocadas, etc.)

- A cada nova alocação, caso a memória esteja cheia, aplicar um algoritmo de substituição de páginas e substituir uma página (de qualquer processo)

- Ao final da execução calcule e exiba a quantidade de "page miss" que o algoritmo sofre no total.